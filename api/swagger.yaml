---
swagger: "2.0"
info:
  description: "Cloud-native media hosting & streaming server for businesses."
  version: "v1"
  title: "Gilfoyle server"
  contact: {}
  license:
    name: "GNU General Public License v3.0"
    url: "https://github.com/dreamvo/gilfoyle/blob/master/LICENSE"
host: "demo-v1.gilfoyle.dreamvo.com"
basePath: "/"
schemes:
- "http"
- "https"
paths:
  /healthz:
    get:
      tags:
      - "Instance"
      summary: "Check service status"
      description: "Check for the health of the service"
      operationId: "checkHealth"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/inline_response_200"
  /medias:
    get:
      tags:
      - "Medias"
      summary: "Query medias"
      description: "Get latest created medias"
      operationId: "getAllMedias"
      produces:
      - "application/json"
      parameters:
      - name: "limit"
        in: "query"
        description: "Max number of results"
        required: false
        type: "integer"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "offset"
        in: "query"
        description: "Number of results to ignore"
        required: false
        type: "integer"
        x-exportParamName: "Offset"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/inline_response_200_1"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/util.ErrorResponse"
    post:
      tags:
      - "Medias"
      summary: "Create a media"
      description: "Create a new media"
      operationId: "createMedia"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "media"
        description: "Media data"
        required: true
        schema:
          $ref: "#/definitions/api.CreateMedia"
        x-exportParamName: "Media"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/inline_response_200_2"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/util.ErrorResponse"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/util.ErrorResponse"
  /medias/{id}:
    get:
      tags:
      - "Medias"
      summary: "Get a media"
      description: "Get one media"
      operationId: "getMedia"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Media ID"
        required: true
        type: "string"
        x-exportParamName: "Id"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/inline_response_200_2"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/util.ErrorResponse"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/util.ErrorResponse"
    delete:
      tags:
      - "Medias"
      summary: "Delete a media"
      description: "Delete one media"
      operationId: "deleteMedia"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Media ID"
        required: true
        type: "string"
        x-exportParamName: "Id"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/util.DataResponse"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/util.ErrorResponse"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/util.ErrorResponse"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/util.ErrorResponse"
    patch:
      tags:
      - "Medias"
      summary: "Update a media"
      description: "Update an existing media"
      operationId: "updateMedia"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Media ID"
        required: true
        type: "string"
        x-exportParamName: "Id"
      - in: "body"
        name: "media"
        description: "Media data"
        required: true
        schema:
          $ref: "#/definitions/api.UpdateMedia"
        x-exportParamName: "Media"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/inline_response_200_2"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/util.ErrorResponse"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/util.ErrorResponse"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/util.ErrorResponse"
  /medias/{id}/upload/audio:
    post:
      tags:
      - "Medias"
      summary: "Upload a audio file"
      description: "Upload a new audio file for a given media ID"
      operationId: "uploadAudio"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Media identifier"
        required: true
        type: "string"
        x-exportParamName: "Id"
      - name: "file"
        in: "formData"
        description: "Audio file"
        required: true
        type: "file"
        x-exportParamName: "File"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/inline_response_200_3"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/util.ErrorResponse"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/util.ErrorResponse"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/util.ErrorResponse"
      deprecated: true
  /medias/{id}/upload/video:
    post:
      tags:
      - "Medias"
      summary: "Upload a video file"
      description: "Upload a new video file for a given media ID"
      operationId: "uploadVideo"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Media identifier"
        required: true
        type: "string"
        x-exportParamName: "Id"
      - name: "file"
        in: "formData"
        description: "Video file"
        required: true
        type: "file"
        x-exportParamName: "File"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/inline_response_200_3"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/util.ErrorResponse"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/util.ErrorResponse"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/util.ErrorResponse"
  /medias/{media_id}/attachments:
    get:
      tags:
      - "Attachments"
      summary: "Get attachments of a media"
      description: "Get attachments of a media"
      operationId: "getMediaAttachments"
      produces:
      - "application/json"
      parameters:
      - name: "media_id"
        in: "path"
        description: "Media identifier"
        required: true
        type: "string"
        x-exportParamName: "MediaId"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/util.DataResponse"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/util.ErrorResponse"
      deprecated: true
  /medias/{media_id}/attachments/{key}:
    post:
      tags:
      - "Attachments"
      summary: "Add attachment to a media"
      description: "Add attachment to a media"
      operationId: "addMediaAttachment"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "media_id"
        in: "path"
        description: "Media identifier"
        required: true
        type: "string"
        x-exportParamName: "MediaId"
      - name: "key"
        in: "path"
        description: "Attachment unique identifier"
        required: true
        type: "string"
        x-exportParamName: "Key"
      - name: "file"
        in: "formData"
        description: "Attachment file"
        required: true
        type: "file"
        x-exportParamName: "File"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/util.DataResponse"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/util.ErrorResponse"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/util.ErrorResponse"
      deprecated: true
    delete:
      tags:
      - "Attachments"
      summary: "Delete attachment of a media"
      description: "Delete attachment of a media"
      operationId: "deleteMediaAttachment"
      produces:
      - "application/json"
      parameters:
      - name: "media_id"
        in: "path"
        description: "Media identifier"
        required: true
        type: "string"
        x-exportParamName: "MediaId"
      - name: "key"
        in: "path"
        description: "Attachment unique identifier"
        required: true
        type: "string"
        x-exportParamName: "Key"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/util.DataResponse"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/util.ErrorResponse"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/util.ErrorResponse"
      deprecated: true
  /medias/{media_id}/stream/playlists/{filename}:
    get:
      tags:
      - "Stream"
      summary: "Get HLS playlist file of a media"
      description: "Get HLS playlist file of a media"
      operationId: "getMediaPlaylistFile"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "media_id"
        in: "path"
        description: "Media identifier"
        required: true
        type: "string"
        x-exportParamName: "MediaId"
      - name: "filename"
        in: "path"
        description: "HLS filename"
        required: true
        type: "string"
        x-exportParamName: "Filename"
      responses:
        "200":
          description: "OK"
          headers:
            Content-Type:
              type: "string"
              description: "application/octet-stream"
          schema:
            type: "string"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/util.ErrorResponse"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/util.ErrorResponse"
definitions:
  api.CreateMedia:
    type: "object"
    required:
    - "title"
    properties:
      title:
        type: "string"
        example: "Sheep Discovers How To Use A Trampoline"
  api.FileFormat:
    type: "object"
    properties:
      bit_rate:
        type: "string"
      duration:
        type: "string"
        example: "0"
      filename:
        type: "string"
      format_long_name:
        type: "string"
      format_name:
        type: "string"
      nb_programs:
        type: "integer"
      nb_streams:
        type: "integer"
      probe_score:
        type: "integer"
      size:
        type: "string"
      start_time:
        type: "string"
        example: "0"
    example:
      duration: "0"
      bit_rate: "bit_rate"
      start_time: "0"
      filename: "filename"
      size: "size"
      probe_score: 1
      format_long_name: "format_long_name"
      nb_programs: 0
      nb_streams: 6
      format_name: "format_name"
  api.HealthCheckResponse:
    type: "object"
    properties:
      commit:
        type: "string"
      tag:
        type: "string"
    example:
      commit: "commit"
      tag: "tag"
  api.UpdateMedia:
    type: "object"
    required:
    - "title"
    properties:
      title:
        type: "string"
        example: "Sheep Discovers How To Use A Trampoline"
  ent.Media:
    type: "object"
    properties:
      created_at:
        type: "string"
        description: "CreatedAt holds the value of the \"created_at\" field."
      edges:
        description: "Edges holds the relations/edges for other nodes in the graph.\n\
          The values are being populated by the MediaQuery when eager-loading is set."
        $ref: "#/definitions/ent.MediaEdges"
      id:
        type: "string"
        description: "ID of the ent."
      original_filename:
        type: "string"
        description: "OriginalFilename holds the value of the \"original_filename\"\
          \ field."
      status:
        type: "string"
        description: "Status holds the value of the \"status\" field."
      title:
        type: "string"
        description: "Title holds the value of the \"title\" field."
      updated_at:
        type: "string"
        description: "UpdatedAt holds the value of the \"updated_at\" field."
    example:
      original_filename: "original_filename"
      updated_at: "updated_at"
      edges:
        media_files:
        - duration_seconds: 0.80082819046101150206595775671303272247314453125
          resolution_height: 1
          rendition_name: "rendition_name"
          resolution_width: 5
          framerate: 6
          target_bandwidth: 5
          edges: {}
          format: "format"
          created_at: "created_at"
          updated_at: "updated_at"
          media_type: "media_type"
          id: "id"
          video_bitrate: 2
        - duration_seconds: 0.80082819046101150206595775671303272247314453125
          resolution_height: 1
          rendition_name: "rendition_name"
          resolution_width: 5
          framerate: 6
          target_bandwidth: 5
          edges: {}
          format: "format"
          created_at: "created_at"
          updated_at: "updated_at"
          media_type: "media_type"
          id: "id"
          video_bitrate: 2
      created_at: "created_at"
      id: "id"
      title: "title"
      status: "status"
  ent.MediaEdges:
    type: "object"
    properties:
      media_files:
        type: "array"
        description: "MediaFiles holds the value of the media_files edge."
        items:
          $ref: "#/definitions/ent.MediaFile"
    example:
      media_files:
      - duration_seconds: 0.80082819046101150206595775671303272247314453125
        resolution_height: 1
        rendition_name: "rendition_name"
        resolution_width: 5
        framerate: 6
        target_bandwidth: 5
        edges: {}
        format: "format"
        created_at: "created_at"
        updated_at: "updated_at"
        media_type: "media_type"
        id: "id"
        video_bitrate: 2
      - duration_seconds: 0.80082819046101150206595775671303272247314453125
        resolution_height: 1
        rendition_name: "rendition_name"
        resolution_width: 5
        framerate: 6
        target_bandwidth: 5
        edges: {}
        format: "format"
        created_at: "created_at"
        updated_at: "updated_at"
        media_type: "media_type"
        id: "id"
        video_bitrate: 2
  ent.MediaFile:
    type: "object"
    properties:
      created_at:
        type: "string"
        description: "CreatedAt holds the value of the \"created_at\" field."
      duration_seconds:
        type: "number"
        description: "DurationSeconds holds the value of the \"duration_seconds\"\
          \ field."
      edges:
        description: "Edges holds the relations/edges for other nodes in the graph.\n\
          The values are being populated by the MediaFileQuery when eager-loading\
          \ is set."
        $ref: "#/definitions/ent.MediaFileEdges"
      format:
        type: "string"
        description: "Format holds the value of the \"format\" field."
      framerate:
        type: "integer"
        description: "Framerate holds the value of the \"framerate\" field."
      id:
        type: "string"
        description: "ID of the ent."
      media_type:
        type: "string"
        description: "MediaType holds the value of the \"media_type\" field."
      rendition_name:
        type: "string"
        description: "RenditionName holds the value of the \"rendition_name\" field."
      resolution_height:
        type: "integer"
        description: "ResolutionHeight holds the value of the \"resolution_height\"\
          \ field."
      resolution_width:
        type: "integer"
        description: "ResolutionWidth holds the value of the \"resolution_width\"\
          \ field."
      target_bandwidth:
        type: "integer"
        description: "TargetBandwidth holds the value of the \"target_bandwidth\"\
          \ field."
      updated_at:
        type: "string"
        description: "UpdatedAt holds the value of the \"updated_at\" field."
      video_bitrate:
        type: "integer"
        description: "VideoBitrate holds the value of the \"video_bitrate\" field."
    example:
      duration_seconds: 0.80082819046101150206595775671303272247314453125
      resolution_height: 1
      rendition_name: "rendition_name"
      resolution_width: 5
      framerate: 6
      target_bandwidth: 5
      edges: {}
      format: "format"
      created_at: "created_at"
      updated_at: "updated_at"
      media_type: "media_type"
      id: "id"
      video_bitrate: 2
  ent.MediaFileEdges:
    type: "object"
    properties:
      media:
        description: "Media holds the value of the media edge."
        $ref: "#/definitions/ent.Media"
    example: {}
  util.DataResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        example: 200
      data:
        type: "object"
        properties: {}
    example:
      code: 200
      data: "{}"
  util.ErrorResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        example: 400
      message:
        type: "string"
        example: "status bad request"
  inline_response_200:
    type: "object"
    properties:
      data:
        $ref: "#/definitions/api.HealthCheckResponse"
      util.DataResponse:
        $ref: "#/definitions/util.DataResponse"
    example:
      util.DataResponse:
        code: 200
        data: "{}"
      data:
        commit: "commit"
        tag: "tag"
  inline_response_200_1:
    type: "object"
    properties:
      data:
        type: "array"
        items:
          $ref: "#/definitions/ent.Media"
      util.DataResponse:
        $ref: "#/definitions/util.DataResponse"
    example:
      util.DataResponse:
        code: 200
        data: "{}"
      data:
      - original_filename: "original_filename"
        updated_at: "updated_at"
        edges:
          media_files:
          - duration_seconds: 0.80082819046101150206595775671303272247314453125
            resolution_height: 1
            rendition_name: "rendition_name"
            resolution_width: 5
            framerate: 6
            target_bandwidth: 5
            edges: {}
            format: "format"
            created_at: "created_at"
            updated_at: "updated_at"
            media_type: "media_type"
            id: "id"
            video_bitrate: 2
          - duration_seconds: 0.80082819046101150206595775671303272247314453125
            resolution_height: 1
            rendition_name: "rendition_name"
            resolution_width: 5
            framerate: 6
            target_bandwidth: 5
            edges: {}
            format: "format"
            created_at: "created_at"
            updated_at: "updated_at"
            media_type: "media_type"
            id: "id"
            video_bitrate: 2
        created_at: "created_at"
        id: "id"
        title: "title"
        status: "status"
      - original_filename: "original_filename"
        updated_at: "updated_at"
        edges:
          media_files:
          - duration_seconds: 0.80082819046101150206595775671303272247314453125
            resolution_height: 1
            rendition_name: "rendition_name"
            resolution_width: 5
            framerate: 6
            target_bandwidth: 5
            edges: {}
            format: "format"
            created_at: "created_at"
            updated_at: "updated_at"
            media_type: "media_type"
            id: "id"
            video_bitrate: 2
          - duration_seconds: 0.80082819046101150206595775671303272247314453125
            resolution_height: 1
            rendition_name: "rendition_name"
            resolution_width: 5
            framerate: 6
            target_bandwidth: 5
            edges: {}
            format: "format"
            created_at: "created_at"
            updated_at: "updated_at"
            media_type: "media_type"
            id: "id"
            video_bitrate: 2
        created_at: "created_at"
        id: "id"
        title: "title"
        status: "status"
  inline_response_200_2:
    type: "object"
    properties:
      data:
        $ref: "#/definitions/ent.Media"
      util.DataResponse:
        $ref: "#/definitions/util.DataResponse"
    example:
      util.DataResponse:
        code: 200
        data: "{}"
      data:
        original_filename: "original_filename"
        updated_at: "updated_at"
        edges:
          media_files:
          - duration_seconds: 0.80082819046101150206595775671303272247314453125
            resolution_height: 1
            rendition_name: "rendition_name"
            resolution_width: 5
            framerate: 6
            target_bandwidth: 5
            edges: {}
            format: "format"
            created_at: "created_at"
            updated_at: "updated_at"
            media_type: "media_type"
            id: "id"
            video_bitrate: 2
          - duration_seconds: 0.80082819046101150206595775671303272247314453125
            resolution_height: 1
            rendition_name: "rendition_name"
            resolution_width: 5
            framerate: 6
            target_bandwidth: 5
            edges: {}
            format: "format"
            created_at: "created_at"
            updated_at: "updated_at"
            media_type: "media_type"
            id: "id"
            video_bitrate: 2
        created_at: "created_at"
        id: "id"
        title: "title"
        status: "status"
  inline_response_200_3:
    type: "object"
    properties:
      data:
        $ref: "#/definitions/api.FileFormat"
      util.DataResponse:
        $ref: "#/definitions/util.DataResponse"
    example:
      util.DataResponse:
        code: 200
        data: "{}"
      data:
        duration: "0"
        bit_rate: "bit_rate"
        start_time: "0"
        filename: "filename"
        size: "size"
        probe_score: 1
        format_long_name: "format_long_name"
        nb_programs: 0
        nb_streams: 6
        format_name: "format_name"
