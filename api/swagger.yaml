---
swagger: "2.0"
info:
  description: "Media streaming server backed by decentralized filesystem."
  version: "0.1-beta"
  title: "Gilfoyle server"
  contact: {}
  license:
    name: "GNU General Public License v3.0"
    url: "https://github.com/dreamvo/gilfoyle/blob/master/LICENSE"
host: "demo-v1.gilfoyle.dreamvo.com"
basePath: "/"
schemes:
- "http"
- "https"
paths:
  /health:
    get:
      tags:
      - "health"
      summary: "Check service status"
      description: "Check for the health of the service"
      operationId: "checkHealth"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "OK"
          schema:
            type: "object"
  /medias:
    get:
      tags:
      - "Medias"
      summary: "Query medias"
      description: "Get latest created medias"
      operationId: "getAllMedias"
      produces:
      - "application/json"
      parameters:
      - name: "limit"
        in: "query"
        description: "Max number of results"
        required: false
        type: "integer"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "offset"
        in: "query"
        description: "Number of results to ignore"
        required: false
        type: "integer"
        x-exportParamName: "Offset"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/inline_response_200"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/httputils.ErrorResponse"
    post:
      tags:
      - "Medias"
      summary: "Create a media"
      description: "Create a new media"
      operationId: "createMedia"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "media"
        description: "Media data"
        required: true
        schema:
          $ref: "#/definitions/api.CreateMedia"
        x-exportParamName: "Media"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/inline_response_200_1"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/httputils.ErrorResponse"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/httputils.ErrorResponse"
  /medias/{id}:
    get:
      tags:
      - "Medias"
      summary: "Get a media"
      description: "Get one media"
      operationId: "getMedia"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Media ID"
        required: true
        type: "string"
        x-exportParamName: "Id"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/inline_response_200_1"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/httputils.ErrorResponse"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/httputils.ErrorResponse"
    delete:
      tags:
      - "Medias"
      summary: "Delete a media"
      description: "Delete one media"
      operationId: "deleteMedia"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Media ID"
        required: true
        type: "string"
        x-exportParamName: "Id"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/httputils.DataResponse"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/httputils.ErrorResponse"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/httputils.ErrorResponse"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/httputils.ErrorResponse"
    patch:
      tags:
      - "Medias"
      summary: "Update a media"
      description: "Update an existing media"
      operationId: "updateMedia"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Media ID"
        required: true
        type: "string"
        x-exportParamName: "Id"
      - in: "body"
        name: "media"
        description: "Media data"
        required: true
        schema:
          $ref: "#/definitions/api.UpdateMedia"
        x-exportParamName: "Media"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/inline_response_200_1"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/httputils.ErrorResponse"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/httputils.ErrorResponse"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/httputils.ErrorResponse"
  /medias/{id}/upload:
    post:
      tags:
      - "Medias"
      summary: "Upload a media file"
      description: "Upload a new media file for a given media ID"
      operationId: "uploadMediaFile"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Media identifier"
        required: true
        type: "string"
        x-exportParamName: "Id"
      - name: "file"
        in: "formData"
        description: "Media file"
        required: true
        type: "file"
        x-exportParamName: "File"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/inline_response_200_1"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/httputils.ErrorResponse"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/httputils.ErrorResponse"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/httputils.ErrorResponse"
definitions:
  api.CreateMedia:
    type: "object"
    required:
    - "title"
    properties:
      title:
        type: "string"
        example: "Sheep Discovers How To Use A Trampoline"
  api.UpdateMedia:
    type: "object"
    required:
    - "title"
    properties:
      title:
        type: "string"
        example: "Sheep Discovers How To Use A Trampoline"
  ent.Media:
    type: "object"
    properties:
      created_at:
        type: "string"
      id:
        type: "string"
      status:
        type: "string"
      title:
        type: "string"
      updated_at:
        type: "string"
    example:
      updated_at: "updated_at"
      created_at: "created_at"
      id: "id"
      title: "title"
      status: "status"
  httputils.DataResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        example: 200
      data:
        type: "object"
        properties: {}
    example:
      code: 200
      data: "{}"
  httputils.ErrorResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        example: 400
      message:
        type: "string"
        example: "status bad request"
  inline_response_200:
    type: "object"
    properties:
      data:
        type: "array"
        items:
          $ref: "#/definitions/ent.Media"
      httputils.DataResponse:
        $ref: "#/definitions/httputils.DataResponse"
    example:
      data:
      - updated_at: "updated_at"
        created_at: "created_at"
        id: "id"
        title: "title"
        status: "status"
      - updated_at: "updated_at"
        created_at: "created_at"
        id: "id"
        title: "title"
        status: "status"
      httputils.DataResponse:
        code: 200
        data: "{}"
  inline_response_200_1:
    type: "object"
    properties:
      data:
        $ref: "#/definitions/ent.Media"
      httputils.DataResponse:
        $ref: "#/definitions/httputils.DataResponse"
    example:
      data:
        updated_at: "updated_at"
        created_at: "created_at"
        id: "id"
        title: "title"
        status: "status"
      httputils.DataResponse:
        code: 200
        data: "{}"
